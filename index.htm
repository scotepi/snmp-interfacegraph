<!doctype html>
<html>
<head>
    <!-- Scipt by Scott Peters, @scotepi, Version 1.4 -->
    
    <title>SNMP Graph</title>
    
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    
    <style>
    html, body { margin: 0; padding: 0; }
    
    .click {
        cursor: pointer;
    }
    
    .fullChart {
        width: 100%;
        height: 100%;
        overflow: hidden;
    }
    </style>
    <script type="text/javascript">
    // You can change these to suit your needs
    var hashDelimiter = ','; // Change this if it conflicts with your naming conventions
    var maxDataPoints = 18; // How many datapoints before we start erasing them
    var chartType = 'area'; // line and area are supported
    var pollingInterval = 10; // number of seconds before requesting new data
    var snmpProcessor = 'snmpGet.php'; // Path to the snmp ajax script
    var invertInOut = false; // Switch in and out traffic
    
    
    
    // Global variables
    var charts = null;
    var chartOptions = null;
    var chartData = null;
    
    $(function() {
        decidePage();
    });
    
    $(window).on('hashchange', function(){ 
        decidePage();
    });
    
    function decidePage() {
        if (location.hash) {
            pageByHash();
        } else if (location.search) {
            pageBySearch();
        } else {
            listHosts();
        }
    }
    
    function pageByHash() {
        var hash = location.hash.substring(1).split(hashDelimiter);
                
        if (hash.length == 4) {
            selectInterface(hash[0], hash[1], hash[2]);
            invertInOut = true;
            location.hash = location.hash+hashDelimiter+"true";
            console.log(location.hash);
        } else if (hash.length == 3) {
            selectInterface(hash[0], hash[1], hash[2]);
        } else if (hash.length == 2) {
            selectHost(hash[0], hash[1]);
        } else {
            alert("Unkown Hash");
        }
    }
    
    function pageBySearch() {
        var search = parseQueryString();
        
        if (search.hostname && search.interface && search.name) {
            selectInterface(search.hostname, search.interface, decodeURIComponent(search.name));
        } else if (search.hostname && search.name) {
            selectHost(search.hostname, decodeURIComponent(search.name));
        } else {
            alert("Unkown Search Query");
        }
    }
    
    function listHosts() {
        $.post(snmpProcessor, function( data ) {
        $("#title").show().text("Pick a Device");
        $("#content").html('').removeClass('fullChart');
        $("#content").append("<ul/>");
        var ul = $("#content ul");
        
        $.each(data, function(host, name) {
            var li = $('<li/>').text(name).addClass('click').on('click', function() { selectHost(host, name) }).appendTo(ul);
        });
        
    });
    }
    
    function selectHost(host, name) {
        location.hash = host+hashDelimiter+name;
        //console.log(host, name);
        
        $.post(snmpProcessor, {hostname: host}, function( data ) {
            $("#title").show().text("Pick an Interface");
            $("#content").html('').removeClass('fullChart');
            $("#content").append("<ul/>");
            var ul = $("#content ul");
            
            $.each(data, function(id, name) {
                var li = $('<li/>').text(name).addClass('click').on('click', function() { selectInterface(host, id, name) }).appendTo(ul);
            });
        });
    }
    
    function selectInterface(host, id, name) {
        location.hash = host+hashDelimiter+id+hashDelimiter+name;
        //console.log(host,id,name);
        
        // Prep the page
        $("#title").hide();
        $("#content").html('').addClass('fullChart');
        fixBodyHeight();
        $( window ).resize(fixBodyHeight);
        
        // Start Preforming Ajax Calls
        getChartData(host, id);
        setInterval(function() { getChartData(host, id) }, pollingInterval * 1000);
        
        // Load the Chart
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(function () {
            chartData = new google.visualization.DataTable();
            chartData.addColumn('datetime', 'Time');
            chartData.addColumn('number', 'Traffic In', 'style');
            chartData.addColumn('number', 'Traffic Out');
            
            chartOptions = {
                title: name,
                curveType: 'function',
                legend: { 
                        position: 'top',
                        alignment: 'end',
                    },
                vAxis: { 
                        format: '# Mbps',
                        minValue: 0,
                    },
                hAxis: { 
                    },
                colors: ['#0f0', '#00f'],
                series: {
                        0: {
                            'line-width': 3,
                        },
                        1: {
                            'line-width': 1,
                        },
                    },
                pointSize: 4,
                chartArea: {
                        right: 5,
                        left: '7%',
                        bottom: 20,
                        top: 60,
                    },
            };
            
            // Pick the chart type
            if (chartType == 'area') {
                chartOptions.pointSize = 0;
                charts = new google.visualization.AreaChart(document.getElementById('content'));
            } else {
                charts = new google.visualization.LineChart(document.getElementById('content'));
            }
            
            charts.draw(chartData, chartOptions);
        });
    }
    
    function getChartData(host, id) {
        $.post(snmpProcessor, {hostname: host, interface: id}, function( d ) {
            var data = d.data;
            if (data.inDiff > 0 && data.outDiff > 0) {
                if (invertInOut) {
                    addChartPoint(new Date(data.time * 1000), data.timeDiff, data.outDiff, data.inDiff);
                } else {
                    addChartPoint(new Date(data.time * 1000), data.timeDiff, data.inDiff, data.outDiff);
                }
            }
        });
    }
    
    function addChartPoint(time, timeDiff, dataIn, dataOut) {
        //console.log('addChartPoint', time, timeDiff, dataIn, dataOut);
        
        dataIn = (dataIn*8) / (1024*1024) / timeDiff;
        dataOut = (dataOut*8) / (1024*1024) / timeDiff;
        
        if (chartData) {
            //console.log('chartData', time, dataIn, dataOut);
            chartData.addRow([time, dataIn, dataOut]);
            
            // Delete Rows over maxDataPoints
            if (chartData.getNumberOfRows() > maxDataPoints) {
                chartData.removeRows(0, chartData.getNumberOfRows() - maxDataPoints + 1);
            }
            
            // Redraw the chart
            charts.draw(chartData, chartOptions);
        }
        
        
    }
    
    function fixBodyHeight() {
        //console.log('fixBodyHeight');
        $("#content").css('height', $( window ).innerHeight()+'px');
        if (chartData) {
            charts.draw(chartData, chartOptions);
        }
    }
    
    
    // Based on http://www.joezimjs.com/javascript/3-ways-to-parse-a-query-string-in-a-url/
    function parseQueryString() {
        var queryString = location.search.substr(1);
        var params = {}, queries, temp, i, l;
     
        // Split into key/value pairs
        queries = queryString.split("&");
     
        // Convert the array of strings into an object
        for ( i = 0, l = queries.length; i < l; i++ ) {
            temp = queries[i].split('=');
            params[temp[0]] = temp[1];
        }
     
        return params;
    }
    </script>
</head>
<body>

<h1 id="title"></h1>
<div id="content"></div>

</body>
</html>
